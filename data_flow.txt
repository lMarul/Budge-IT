# BUDGET TRACKER SYSTEM - COMPLETE DATA FLOW DOCUMENTATION

## **COMPLETE DATA FLOW SUMMARY**

Here's the complete data flow from input to output, showing exactly how data moves through each file:

### **1. USER REGISTRATION FLOW**
```
User Input: Registration Form
    ↓
templates/register.html (lines 40-70)
    - Form fields: username, email, password, confirm_password
    - Action: POST to auth.register
    ↓
routes/auth.py (lines 55-95)
    - Validates form data
    - Checks for existing username
    - Calls User.create()
    ↓
models.py (lines 17-50)
    - User.create() method
    - Generates unique ID
    - Hashes password
    - Creates user object
    ↓
utils.py (lines 100-120)
    - get_db_data() loads JSON
    - set_db_data() updates memory
    - save_database() writes to file
    ↓
budget_tracker.json
    - Stores user data permanently
    ↓
Default Categories Created
    - Category.create() for each default category
    - Same flow through models.py → utils.py → JSON
```

### **2. USER LOGIN FLOW**
```
User Input: Login Form
    ↓
templates/login.html
    - Form fields: username, password
    - Action: POST to auth.login
    ↓
routes/auth.py (lines 20-45)
    - Gets form data
    - Calls User.authenticate()
    ↓
models.py (lines 52-75)
    - User.authenticate() method
    - Checks username/password hash
    - Returns user data if valid
    ↓
Flask Session Created
    - session['user_id'] = user['id']
    - session['username'] = user['username']
    ↓
Redirect to Dashboard
    - admin → admin dashboard
    - regular user → main dashboard
```

### **3. ADDING TRANSACTION FLOW**
```
User Input: Transaction Form
    ↓
templates/income.html or templates/expense.html (lines 27-60)
    - Form fields: category_id, amount, date, item_name
    - Hidden field: type (income/expense)
    - Action: POST to main.add_transaction
    ↓
routes/main.py (lines 106-135)
    - Gets form data and user_id from session
    - Validates category belongs to user
    - Calls Transaction.create()
    ↓
models.py (lines 345-390)
    - Transaction.create() method
    - Generates unique transaction ID
    - Gets category info for display
    - Creates transaction object
    ↓
utils.py (lines 100-120)
    - Updates database in memory
    - Saves to JSON file
    ↓
budget_tracker.json
    - Stores transaction data permanently
    ↓
Redirect to Income/Expense Page
    - Shows success message
    - Displays updated data
```

### **4. VIEWING DASHBOARD FLOW**
```
User Request: Visit Dashboard
    ↓
routes/main.py (lines 40-65)
    - Gets user_id from session
    - Calls Transaction.get_by_user()
    ↓
models.py (lines 392-410)
    - Transaction.get_by_user() method
    - Filters transactions by user_id
    ↓
utils.py (lines 90-100)
    - get_db_data() loads from JSON
    - Returns transaction list
    ↓
budget_tracker.json
    - Data retrieved from storage
    ↓
routes/main.py (lines 55-60)
    - Calculates totals (income/expense)
    - Passes data to template
    ↓
templates/dashboard.html
    - Displays financial summary
    - Shows charts and statistics
    ↓
JavaScript (Chart.js)
    - Fetches chart data via AJAX
    - Creates visualizations
```

### **5. VIEWING TRANSACTION HISTORY FLOW**
```
User Request: Visit History Page
    ↓
routes/main.py (lines 139-180)
    - Gets user_id from session
    - Calls Transaction.get_by_user()
    ↓
models.py (lines 392-410)
    - Returns all user transactions
    ↓
routes/main.py (lines 150-175)
    - Enhances transactions with category info
    - Sorts by date (newest first)
    ↓
templates/history.html
    - Displays transaction table
    - Shows edit/delete options
    - Handles AJAX for smooth interactions
```

### **6. CHART DATA FLOW (AJAX)**
```
JavaScript Request: Chart Data
    ↓
routes/main.py (lines 402-515)
    - get_chart_data route
    - Filters by period and type
    - Returns JSON response
    ↓
JavaScript (Chart.js)
    - Receives JSON data
    - Creates/updates charts
    - Updates DOM with visualizations
```

### **7. ADMIN DATA FLOW**
```
Admin Request: View All Data
    ↓
routes/admin.py
    - Gets all users, categories, transactions
    - Calculates system-wide statistics
    ↓
templates/admin_functions/
    - Displays admin dashboard
    - Shows user management
    - Database viewer
```

## **KEY DATA STORAGE POINTS**

1. **Primary Storage**: `budget_tracker.json` - All persistent data
2. **Session Storage**: Flask session - Current user info
3. **Memory Cache**: `utils.py` db_data variable - Fast access
4. **Form Data**: HTML forms → Flask request.form
5. **Template Variables**: Python → Jinja2 templates

## **DATA TRANSFORMATION POINTS**

1. **Password Hashing**: Plain text → Hashed (models.py)
2. **Date Formatting**: ISO format → Display format (utils.py)
3. **Chart Data**: Raw transactions → Aggregated JSON (routes/main.py)
4. **Category Enhancement**: Basic transactions → Rich display data (routes/main.py)

## **DETAILED FILE-BY-FILE BREAKDOWN**

### **Input Sources:**
- **User Forms**: HTML templates with POST actions
- **AJAX Requests**: JavaScript fetch() calls
- **URL Parameters**: Route parameters and query strings
- **Session Data**: Flask session object

### **Processing Layers:**
- **Routes**: Handle HTTP requests and coordinate data flow
- **Models**: Business logic and database operations
- **Utils**: Database utilities and helper functions
- **Decorators**: Authentication and authorization

### **Storage Layers:**
- **JSON File**: Persistent storage (budget_tracker.json)
- **Memory Cache**: Fast access (utils.py db_data)
- **Session**: Temporary user state (Flask session)

### **Output Destinations:**
- **HTML Templates**: User interface display
- **JSON Responses**: AJAX data for charts
- **Flash Messages**: User notifications
- **Redirects**: Page navigation

## **SECURITY FLOW**

1. **Authentication**: Login validates credentials
2. **Session Management**: User state maintained
3. **Authorization**: @login_required decorators
4. **Data Isolation**: User can only access their own data
5. **Input Validation**: Form data sanitized and validated

## **ERROR HANDLING FLOW**

1. **Form Validation**: Client-side and server-side checks
2. **Database Errors**: Graceful handling of file operations
3. **Authentication Errors**: Redirect to login with messages
4. **Authorization Errors**: 404 or redirect for unauthorized access
5. **Data Integrity**: Validation of relationships and constraints

This flow ensures data integrity, security, and efficient access patterns throughout your application!
